#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "tonemapping_utils.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, r11f_g11f_b10f) restrict uniform image2D renderImage;

layout(binding = 1) buffer histogramBuffer {
    uint bins[];
};

layout(binding = 2) buffer histogramInfo_t {
    float binStepSize; // absolute
    float minWorldLuminance; // relative
    float maxWorldLuminance; // relative
    float minWorldBrightness;
    float maxWorldBrightness;
};

layout(push_constant) uniform params {
    uint len; 
};


void calculateInfo(float luminance) {
    minWorldBrightness = log(minWorldLuminance);
    maxWorldBrightness = log(maxWorldLuminance);

    binStepSize = (maxDisplayLuminance - minDisplayLuminance) / float(len);

    memoryBarrierBuffer();
    barrier();
}

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    uvec2 renderImageSize = imageSize(renderImage);
    if (texCoord.x >= renderImageSize.x || texCoord.y >= renderImageSize.y) {
        return;
    }

    vec3 color = imageLoad(renderImage, texCoord).rgb;
    // float luminance = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;
    float luminance = getAbsoluteLuminance(color, minWorldLuminance, maxWorldLuminance);

    calculateInfo(luminance);
    uint currentBin = getBin(luminance, binStepSize, len);
    atomicAdd(bins[currentBin], 1);
}