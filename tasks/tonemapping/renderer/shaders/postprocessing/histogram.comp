#version 450

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, r11f_g11f_b10f) uniform image2D renderImage;

layout(binding = 1) buffer histogramBuffer {
    int bins[];
};

layout(binding = 2) uniform histogramInfo {
    float binStepSize;
    // cd/m^2
    float minWorldLuminance;
    float maxWorldLuminance;
    float minWorldBrightness;
    float maxWorldBrightness;
};

layout(push_constant) uniform params {
    uint len; 
};

void calculateMinMax(float luminance) {
    if (gl_GlobalInvocationID.xy == ivec2(0, 0)) {
        minWorldLuminance = 1000000.0;
        maxWorldLuminance = -1.0;
    }
    barrier();

    minWorldLuminance = atominMin(minWorldLuminance, luminance);
    maxWorldLuminance = atomicMax(maxWorldLuminance, luminance);
    barrier();

    maxWorldBrightness = log(maxWorldLuminance);
    minWorldBrightness = log(minWorldLuminance);
    binStepSize = (maxWorldBrightness - minWorldBrightness) / float(len); // assume len > 0 ofc
}

uint getBin(float luminance) {

    // luminance = clamp(luminance, minDisplayLuminance, maxDisplayLuminance); // ? for now (maybe need world min and max luminance)
    return uint(floor((log(luminance) - minWorldBrightness) / binStepSize)); 
}

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 renderImageSize = imageSize(renderImage);
    if (texCoord.x >= renderImageSize.x || texCoord.y >= renderImageSize.y) {
        return;
    }

    vec3 color = imageLoad(renderImage, texCoord).rgb;
    // https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color (option 2)
    float luminance = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;

    calculateMinMax();
    currentBin = getBin(luminance);

    atomicAdd(bins[currentBin], 1);
}