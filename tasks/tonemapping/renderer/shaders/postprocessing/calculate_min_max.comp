#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "tonemapping_utils.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, r11f_g11f_b10f) restrict uniform image2D renderImage;

layout(binding = 1) buffer histogramInfo_t {
    float binStepSize; // absolute
    uint minWorldLuminance; // relative
    uint maxWorldLuminance; // relative
    float minWorldBrightness;
    float maxWorldBrightness;
};

layout(push_constant) uniform params {
    uint len; 
};

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    uvec2 renderImageSize = imageSize(renderImage);
    if (texCoord.x >= renderImageSize.x || texCoord.y >= renderImageSize.y) {
        return;
    }

    vec3 color = imageLoad(renderImage, texCoord).rgb;
    // https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color (option 2)
    float luminance = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;

    if (gl_GlobalInvocationID.xy == ivec2(0, 0)) {
        minWorldLuminance = uint(-1);
        maxWorldLuminance = 0;
    }
    memoryBarrierBuffer();
    barrier();

    float trueMin = max(0.0001, luminance);

    atomicMin(minWorldLuminance, floatBitsToUint(trueMin));
    atomicMax(maxWorldLuminance, floatBitsToUint(luminance));
}