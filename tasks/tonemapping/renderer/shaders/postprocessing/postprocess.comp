#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, r11f_g11f_b10f) restrict uniform image2D renderImage;

layout(binding = 1) readonly buffer distributionBuffer {
    float bins[]; 
};

layout(binding = 2) readonly buffer histogramInfo_t {
    float binStepSize;
    float minWorldLuminance;    // relative
    float maxWorldLuminance;    // relative
    float minWorldBrightness;
    float maxWorldBrightness;
};

layout(push_constant) uniform params {
    uint len; 
};

const float minDisplayLuminance = 0.0001;
const float maxDisplayLuminance = 1;

uint getBin(float luminance) {
    return clamp(uint(floor((luminance - minWorldLuminance) / binStepSize)), 0, len - 1); 
}


void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 renderImageSize = imageSize(renderImage);
    if (texCoord.x >= renderImageSize.x || texCoord.y >= renderImageSize.y) {
        return;
    }
    vec3 color = imageLoad(renderImage, texCoord).rgb;

    float luminance = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;
    uint currentBin = getBin(luminance);
    float adjustedLuminance = 
        minDisplayLuminance 
        + (maxDisplayLuminance - minDisplayLuminance)
        * bins[currentBin];

    color = color * adjustedLuminance / luminance;
    imageStore(renderImage, texCoord, vec4(color, 1.0));
}